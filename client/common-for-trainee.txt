
// service file -----------------------------------------------------------------------------------------------------------------------------------

const errorHandler = (err) => {
  const statusCode = err.response?.status ?? 0;
  const data = {
    errorData: '',
    statusCode,
    message: '',
  };

  if (err.response && err.response.data && err.response.data.message && statusCode != 401) {
    ToastMe(err.response.data.message, 'error');
  }

  if (statusCode === 400 || statusCode === 401 || statusCode === 422) {
    data.errorData = (err.response && err.response.data && err.response.data.errors) ? err.response.data.errors : '';
    data.message = (err.response && err.response.data && err.response.data.message) ? err.response.data.message : '';
  }
  return data;
}

const AuthService = {

  registration: (data) => {
    return dispatch => (
      new Promise((resolve, reject) => {
        axiosFile.post(ServiceConstant.API_HOST + '/registration', data)
          .then(function (res) {
            // handle success
            ToastMe(res.data.message);
            dispatch(action.authRegister(res));
            // // window.location.href = '/account_verification';
            // dispatch(action.authRegisterVerifyOTP(res.data.verify_otp))
            return resolve(res);
          })
          .catch(function (err) {
            // handle error
            const data = errorHandler(err);
            return reject(data);
          })

      })
    )
  }
}

export default AuthService;


// if you want to set token in your header create function in axios file and use this function in your api success code
export function setBearerToken(token) {
  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
}

// this is common function when you call api form anywhere default middleware or header option will set 
function AxiosMiddleware(method, url, data, options) {
  if ((data.env != 'test' && url.search("env=test") == -1) && (options && options?.Accept != 'multipart/form-data')) {
    data = (new Security).encrypt(data);
  }
  axios.defaults.headers.common['site'] = `egemoney`;
  axios.defaults.headers.common['device'] = `web`;
  axios.defaults.headers.common['X-localization'] = `${localStorage.getItem('i18nextLng')}`;
  switch (method) {
    case 'get':
      return axios.get(url, data, options);
    case 'post':
      return axios.post(url, data, options);
    case 'head':
      return axios.head(url, data, options);
    case 'patch':
      return axios.patch(url, data, options);
    case 'put':
      return axios.put(url, data, options);
    case 'delete':
      return axios.delete(url, { data: data, headers: options });
  }

}

export function get(url, data = [], options = {}) {
  return AxiosMiddleware('get', url, data, options)
}
export function post(url, data = [], options = {}) {
  return AxiosMiddleware('post', url, data, options)
}

// this code for when you get unauthorized access from backend at that time first response in this section and after your api response
axios.interceptors.response.use(
  (response) => {
    if (response.data.mac !== undefined) {
      // here should be you decrypt function
      response.data = (new Security).decrypt(response.data);
    }
    return response
  },
  (error) => {
    if (error.response.status === 423) {
      //clear localstorage
    }
    if (error.response.status === 401) {
      //unauth 
      var userdata = localStorage.getItem('jwt_token');
      if (userdata) {
        ToastMe(error.response.data.message);
      }
      //clear localstorage
    }
    return Promise.reject(error);
  }
)


// route main index file---------------------------------------------------------------------------------------------------------------------------
let obj = {
  path: '/support_center',
  layout: 'doctor' | "patient",
  auth: false | true,
  component: <SupportCenter title="Support Center" />,
};

<Route path="/" element={<AuthRoute />}> // your middleware (means login or without login)
  <Route path="/" element={<Master ptitle={Component.props.title} pageNoIndex={auth} path={path} />}> //layout (Like doctore sidebar or patient sidebar)
    <Route exact path={path} element={Component} />
  </Route>
</Route>

// data encryptction ------------------------------------------------------------------------------------------------


import CryptoJS from "crypto-js";
import { serialize, unserialize } from "php-serialize";
import base64 from 'base-64';
import { API_ENCRYPTION_KEY, ENCRYPTION_IV_KEY, API_DECRYPTION_KEY, DECRYPTION_IV_KEY } from "../constants/SecurityConstant";

class Security {
    constructor() { }

    encrypt(value, _serialize = false) {
        const iv = ENCRYPTION_IV_KEY;
        console.log("API_ENCRYPTION_KEY", API_ENCRYPTION_KEY);
        console.log("ENCRYPTION_IV_KEY", ENCRYPTION_IV_KEY);
        

        // Ensure proper serialization
        const dataToEncrypt = _serialize ? serialize(JSON.stringify(value)) : JSON.stringify(value);

        // Encrypt the data
        const encrypted = CryptoJS.AES.encrypt(dataToEncrypt, CryptoJS.enc.Utf8.parse(API_ENCRYPTION_KEY), {
            iv: CryptoJS.enc.Utf8.parse(iv),
            padding: CryptoJS.pad.Pkcs7,
            mode: CryptoJS.mode.CBC,
        }).toString();

        // Generate MAC
        const base64Iv = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(iv));
        const mac = CryptoJS.HmacSHA256(base64Iv + encrypted, API_ENCRYPTION_KEY).toString();

        return { value: encrypted, mac };
    }

    decrypt(response, _unserialize = false) {
        const value = response.value;

        try {
            const decrypted = CryptoJS.AES.decrypt(value, CryptoJS.enc.Utf8.parse(API_DECRYPTION_KEY), {
                iv: CryptoJS.enc.Utf8.parse(DECRYPTION_IV_KEY),
                padding: CryptoJS.pad.Pkcs7,
                mode: CryptoJS.mode.CBC,
            }).toString(CryptoJS.enc.Utf8);


            if (!decrypted) {
                throw new Error("Decryption failed. Invalid data.");
            }
            return _unserialize ? unserialize(JSON.parse(decrypted)) : JSON.parse(decrypted);
        } catch (error) {
            console.error("Decryption error:", error);
            throw new Error("DecryptionException - The data could not be decrypted.");
        }
    }

}

export default Security; 

exports.decryptionProcess = async (req, res, next) => {
    try {
        const { mac, value } = req.body;
        const decrypt = await decryptedDataResponse(mac, value);

        // req.data = decrypt;
        // console.log("req.data after decryption:", req.data);

        res.send(decrypt);
        // next();
    } catch (error) {
        console.log(error);
        return res.status(400).send({ message: "Data not encrypted properly.", error: error.message });
    }
};

-----------------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Formik, Field, Form, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { toastMessage } from '../helpers/Toast';
import { post } from '../../security/axios';
import { fetchData } from '../common/handleMethods';

const ApplyTicket = () => {
    const [activeSection, setActiveSection] = useState('supportTiket');
    const [supportTickets, setSupportTickets] = useState([]);
    const [selectedFile, setSelectedFile] = useState(null);
    const [selectedTicketId, setSelectedTicketId] = useState(null);
    
    const validationSchema = Yup.object({
        message: Yup.string().required('Message is required'),
    });

    useEffect(() => {
        fetchData('/getSupportTickets', (data) => {
            setSupportTickets(data.supportTickets || []);
        });
    }, []);

    const handleApplyClick = (ticketId) => {
        setSelectedTicketId(ticketId);
        setActiveSection('applyTicket');
    };

    const handleFileChange = (event) => {
        setSelectedFile(event.target.files[0]);
    };

    const uploadImage = async () => {
        if (!selectedFile) return null;
        const formData = new FormData();
        formData.append('images', selectedFile);
        
        try {
            const response = await post('/uploadPhoto', formData, {
                headers: { 'Content-Type': 'multipart/form-data' },
            });

            toastMessage('success', "Image uploaded successfully.");
            return response;
        } catch (error) {
            console.log("error", error);
            toastMessage('error', error.response?.data?.message || "Error uploading image.");
            return null;
        }
    };

    const applyTicket = async (message, uploadedFilenames) => {
        post('/applyTickets', { suppotTicketId: selectedTicketId, message, attachment: uploadedFilenames })
            .then((response) => {
                toastMessage('success', response.message);
                setActiveSection('supportTiket');
            })
            .catch((error) => {
                console.log("error", error);
                toastMessage('error', error.response?.data?.message || 'Error applying for ticket.');
            });
    }

    const handleSubmit = async (values, { resetForm }) => {
        const { message } = values;
        try {
            if (selectedFile) {
                const uploadedFilenames = await uploadImage();
                console.log("Upload Files With namess", uploadedFilenames);

                await applyTicket(message, uploadedFilenames);
            } else {
                await applyTicket(message);
            }
            resetForm();
            setActiveSection('supportTiket');
        } catch (error) {
            console.log("error", error);
            toastMessage('error', error.response?.data?.message || 'Error applying for ticket.');
        }


    };

    return (
        <>
            <div className="container mx-auto shadow-lg rounded-lg">
                {activeSection === 'supportTiket' && (
                    <div className="flex-1 p-16 bg-gray-100">
                        <h2 className="text-2xl font-bold">Support Tickets</h2>
                        <div className="grid grid-cols-1 items-center md:items-center grid-cols-2 lg:grid-cols-3 gap-6 mt-6" >
                            {supportTickets.map((supportTicket, index) => (
                                <div key={index} className="card h-full p-10 bg-white shadow-md rounded ">
                                    <center>
                                        <h3 className="text-lg font-bold">{supportTicket.subject}</h3>
                                        <p className="text-1xl">{supportTicket.description}</p>
                                        <br></br>
                                        <button
                                            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full"
                                            onClick={() => handleApplyClick(supportTicket._id)}
                                        >
                                            Apply Ticket
                                        </button>
                                    </center>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {activeSection === 'applyTicket' && (
                    <div className="flex-1 p-16 bg-gray-100">
                        <h2 className="text-2xl font-bold">Apply Tickets</h2>
                        <div className="grid grid-cols-1 items-center md:items-center grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
                            <Formik
                                initialValues={{ message: '' }}
                                validationSchema={validationSchema}
                                onSubmit={handleSubmit}
                            >
                                {({ setFieldValue }) => (
                                    <Form>
                                        {/ Message Input /}
                                        <div className="mb-4">
                                            <label htmlFor="message" className="block text-gray-700 font-medium mb-1">Message</label>
                                            <Field name="message" type="text" className="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter your message" />
                                            <ErrorMessage name="message" component="div" className="text-red-500 text-sm mt-1" />
                                        </div>

                                        {/ File Upload /}
                                        <div className="mb-4">
                                            <label className="block text-sm font-medium text-gray-700">Select Attachment (Optional)</label>
                                            <input
                                                type="file"
                                                accept="image/*"
                                                onChange={handleFileChange}
                                                className="mt-2 mb-4 block w-full text-sm text-gray-900 bg-gray-50 border border-gray-300 rounded-lg cursor-pointer"
                                            />
                                        </div>

                                        {/ Submit Button /}
                                        <div>
                                            <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition duration-300">
                                                Submit
                                            </button>
                                        </div>
                                    </Form>
                                )}
                            </Formik>
                        </div>
                    </div>
                )}
            </div>
        </>
    );
};

export default ApplyTicket;

--------------------------------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { fetchData } from "../../../common/CommonMethod";
import { post } from "../../../security/AxoisMiddleware";
import ToastMe from "../../../common/ToastMe";

const SupportTickets = () => {
    const [supportTicket, setSupportTicket] = useState([]);
    const [showModal, setShowModal] = useState(false);
    const [selectedTicket, setSelectedTicket] = useState(null);
    const { register, handleSubmit, reset } = useForm();
    const [attachment, setAttachment] = useState(null);

    useEffect(() => {
        fetchData('/getSupportTicket', (data) => setSupportTicket(data.getTicket));
    }, []);

    const onSubmit = async (data) => {
        try {
            const messageRes = await post('/applySupportTicket', { ...data, ticketId: selectedTicket._id });
            ToastMe('success', messageRes.data.message);
            
            if (attachment) {
                const formData = new FormData();
                formData.append('attachment', attachment);
                formData.append('ticketId', selectedTicket._id);

                const attachmentRes = await post('/uploadAttachment', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    },
                });
                ToastMe('success', attachmentRes.data.message);
            }
            reset();
            setShowModal(false);
            setAttachment(null); 
        } catch (err) {
            ToastMe('error', Object.values(err.response.data).toString());
            console.error(err);
        }
    };

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-6">
            <h1 className="text-4xl font-bold mb-6 text-gray-900">Support Tickets</h1>
            <br />
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 w-full max-w-6xl">
                {supportTicket.length === 0 ? (
                    <h2 className="text-center text-lg text-gray-500">No Support Tickets Found</h2>
                ) : (
                    supportTicket.map((ticket) => (
                        <div
                            key={ticket._id}
                            className="bg-white rounded-lg shadow-md p-6 transition-transform transform hover:scale-105 flex flex-col justify-between items-center h-48"
                        >
                            <h2 className="text-2xl font-bold text-blue-800 mb-1 text-center hover:text-blue-600 transition-colors">{ticket.subject}</h2>
                            <p className="text-gray-700 text-base mb-2 text-center">{ticket.description}</p>
                            <button
                                onClick={() => {
                                    setSelectedTicket(ticket);
                                    setShowModal(true);
                                }}
                                className="bg-blue-600 text-white rounded-lg py-1 px-3 transition hover:bg-blue-700 w-full text-sm font-semibold"
                            >
                                Apply
                            </button>
                        </div>
                    ))
                )}
            </div>
    
            {showModal && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-70">
                    <div className="bg-white rounded-lg shadow-lg p-6 w-11/12 md:w-1/3">
                        <h2 className="text-2xl font-semibold mb-4 text-center">Apply for {selectedTicket.subject}</h2>
                        <form onSubmit={handleSubmit(onSubmit)}>
                            <textarea
                                {...register("message", { required: true })}
                                placeholder="Type your query here..."
                                className="w-full p-3 border border-gray-300 rounded-lg mb-4 text-sm"
                                rows="3"
                            />
                            <input
                                type="file"
                                onChange={(e) => setAttachment(e.target.files[0])}
                                className="mb-4"
                            />
                            <div className="flex justify-between">
                                <button
                                    type="button"
                                    onClick={() => setShowModal(false)}
                                    className="bg-gray-300 text-gray-700 rounded-lg py-1 px-3 transition hover:bg-gray-400"
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    className="bg-blue-600 text-white rounded-lg py-1 px-3 transition hover:bg-blue-700"
                                >
                                    Submit
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default SupportTickets;
           